file.exists("\\phsabc.ehcnet.ca/homedir/HomeDir05/dfrizzell/R/win-library/3.0/swirl/user_data/Darren)"
file.exists("\\phsabc.ehcnet.ca/homedir/HomeDir05/dfrizzell/R/win-library/3.0/swirl/user_data/Darren)"
file.exists("\\phsabc.ehcnet.ca/homedir/HomeDir05/dfrizzell/R/win-library/3.0/swirl/user_data/Darren")
file.exists("\\\\phsabc.ehcnet.ca/homedir/HomeDir05/dfrizzell/R/win-library/3.0/swirl/user_data/Darren")
file.exists("\\phsabc.ehcnet.ca/homedir/HomeDir05/dfrizzell/R/win-library/3.0/swirl/user_data/Darren")
file.exists("\\phsabc.ehcnet.ca/homedir/HomeDir05/dfrizzell/R/win-library/3.0/swirl/user_data/Darren")
file.exists("\\\\phsabc.ehcnet.ca/homedir/HomeDir05/dfrizzell/R/win-library/3.0/swirl/user_data/Darren")
swirl()
library("swirl")
swirl()
5+7
getwd()
setwd("\\\\srvnetapp01/users$/dfrizzell/PSLS/R-Files/01-Scripts/03-DataFiles")
library(psych)
?rnorm
help.search("norm")
args("rnorm")
rnorm
con <- url("http://www.jhsph.edu", "r")
con <- url("http://www.jhsph.edu", "r")
x <- readlines(con)
head(x)
x <- readLines(con)
head(x)
gwd()
getwd()
a <- available.packages()
head(rownames(a),7)
install.packages("slidify")
install.package("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
swirl
swirl()
library("swirl")
swirl
swirl()
x <- 5+7
x
y <- x - 3
y
c(1.1,9,3.14)
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z * 2 + 100
mySqrt <- sqrt(z-1)
mySqrt
myDiv <- z / mySqrt
myDiv
c(1,2,3,4) + c(0,100)
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
info()
bye()
swirl()
1:20
pi:10
15:1
?':'
skip()
seq(1,20)
seq(1,10, by=0.5)
seq(0,10, by=0.5)
seq(5,10, length=30)
my_seq <- seq(5,10, length=30)
lenght(my_seq)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
bye(0)
bye()
swirl()
num_vect <- c(0.5,55, -10,6)
tf <- num_vect < 1
tf
num_vect>=6
my_char <- "My", "name", "is"
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "darren")
my_name <-c(my_char, "darren")
my_name
paste(my_name, collapse=" ")
paste("Hello", "World", sep = " ")
paste("Hello", "world!", sep = " ")
kl
c(1,2,3)
paste(1:3, c("X","Y","Z"), sep="")
LETTERS
paste(LETTERS, 1:4, sep = "-")
bye()
getwd()
getwd();
dir()
file.exists("\\phsabc.ehcnet.ca/homedir/HomeDir05/dfrizzell/R/win-library/3.0/swirl/user_data/Darren)"
afd
file.exists("\\phsabc.ehcnet.ca/homedir/HomeDir05/dfrizzell/R/win-library/3.0/swirl/user_data/Darren")
file.exists("\\phsabc.ehcnet.ca/homedir/HomeDir05/dfrizzell/R/win-library/3.0/swirl/user_data/Darren")
file.exists("\\\\phsabc.ehcnet.ca/homedir/HomeDir05/dfrizzell/R/win-library/3.0/swirl/user_data/Darren")
library(swirl)
swirl()
5+7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
mySqrt <- sqrt(z - 1)
mySqrt
myDiv <- z / mySqrt
myDiv
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
1:20
pi:10
15:1
?':'
?`:`
seq(1, 20)
seq(0, 10 by=0.5)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10 length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Darren")
my_name
paste(my_name, collapse=" ")
paste("Hello", "World!", sep = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTER, 1:4, sep = "-")
paste(LETTERs, 1:4, sep = "-")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y, z), 100)
myNa <- is.na(myData)
myNA <- is.na(myData)
myNa
myNA
myData == NA
sum(myNA)
myData
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(x[3], x[5], x[7])
x[c(3, 5, 7)]
x[0]
x[3000]
x[x(-2, 10)]
x[(-2, 10)]
x[c(-2, 10)]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect("foo", "bar")
vect[c("foo", "bar")]
myVector <- 1:20
myVector
dim(myVector)
lenght(myVector)
length(myVector)
dim(myVector) <- c(4,5)
dim(myVector)
attributes(myVectore)
attributes(myVector=)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
myMatrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(myMatrix, myMatrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, myData)
colnames(myData) <- cnames
myData
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 1:10
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
?message
log(-1)
?invisible
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(1)
printmessage(NA)
printmessage <- function(x) {
if(is.na(x))
print("x is a missing value")
else if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(1)
printmessage(NA)
printmessage <- function(x) {
if(is.na(x))
print("x is a missing value")
else if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(1)
printmessage(NA)
x <- log(-1)
printmessage(x)
mean(z)
traceback()
debug()
debug(mean)
lm(z~y)
traceback()
debug()
debug(lm)
debug(lm(z~x))
n
n
options(error = recover)
lm(z~y)
nn
nn0
1
1
2
3
4
5
1
library(datasets)
data(iris)
?iris
iris
species <- split(iris, iris$Species)
species
lapply(species, function(x) colMeans(species[, c("Sepal.Length")]))
lapply(species, function(x) colMeans(species[, "Sepal.Length"]))
x <- c(rnorm(10), runif(10), rnorm(10,1)) #10 random normals, 10 uniform variable, 10 normal with a mean of 1
x
f <- gl(3, 10)
f
split(x, f) #splits it into groups
lapply(split(x,f), mean) #gets the mean for each group
x
split(x, f) #splits it into groups
f <- gl(3, 10)
f
species
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
s
iris
species <- split(iris, iris$Species)
species
lapply(species, function(x) colMeans(species[, c("Sepal.Length","Sepal.Width")]))
?subset
species <- ?subset(iris, iris$Species = "virginica")
species
lapply(species, function(x) colMeans(species))
lapply(species, function(species) colMeans(species))
species <- split(iris, iris$Species)
species
lapply(species, function(species) colMeans(species))
species <- split(iris, iris$Species)
species
lapply(species, function(species) colMeans(species))
lapply(species, colMeans(species))
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
s
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
library(datasets)
data(iris)
# A description of the dataset can be found by running
#?iris
species <- split(iris, iris$Species)
species
lapply(species, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
lapply(species, function(x) colMeans(x[, c("Sepal.Length")]))
lapply(species, function(x) colMeans(x[, species$Sepal.Length]))
lapply(species, function(x) colMeans(x[, "Sepal.Length"]))
lapply(species, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
?colMeans
lapply(species, function(x) colMeans(x))
colMeans(species)
colMeans(iris)
colMeans(iris[,iris$Sepal.Lenth])
colMeans(iris[,iris$Sepal.Length])
colMeans(iris[iris$Sepal.Length])
tapply(species, function(x) colMeans(x))
lapply(species, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
tapply(species, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
sapply(species, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
apply(iris, 2, mean)
colMeans(iris)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
vectTest <- apply(iris[, 1:4], 2, mean)
class(vectTest)
attributes(vectTest)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
?tapply
data(iris)
iris
tapply(species$Sepal.Length, species$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
lapply(mtcars, mean)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean) # --- YES
tapply(mtcars$hp, mtcars$cyl, mean)
vectorTest <- tapply(mtcars$hp, mtcars$cyl, mean)
vectorTest$4
vectorTest[1]
vectorTest[1] - vectorTest[3]
abs(vectorTest[1] - vectorTest[3])
?apply
apply(vectorTest, abs)
apply(vectorTest, c(1,3) abs)
apply(vectorTest, c(1,3), abs)
apply(vectorTest, c(1,2,3), abs)
abs(vectorTest[1] - vectorTest[3])
tapply(mtcars$hp, mtcars$cyl, mean)
vectorTest <- tapply(mtcars$hp, mtcars$cyl, mean)
abs(vectorTest[1] - vectorTest[3])
debug(ls)
?ls
ls
ls
ls
ls
ls
ls(x)
a
a
0
0
0
0
0
1
2
3
# Execution of 'ls' will suspend at the beginning of the function and you will be in the browser. --- YES
# The 'ls' function will return an error.
quit
setwd("\\\\phsabc.ehcnet.ca/homedir/HomeDir05/dfrizzell/PSLS/R-Files/04-DataScience-Coursera/00-GitHubRepo/ProgrammingAssignment2")
dir()
source("cachematrix.R")
source("cachematrix.R")
a <- makeCacheMatrix()
a
b
b <- matrix(1:4, 2,2)
b
tester <- makeCacheMatrix(b)
tester
tester$get()
cacheSolve(b)
cacheSolve(tester)
class(a)
